#!/bin/bash -eu
### NAME
###     image-make - create, tag and push docker image
###
### SYNOPSIS
###     image-make [Options] <DockerfileDir>
###
### DESCRIPTION
###     This program builds, tag, and push docker images to docker registry.
###
### Note that this script assumes that you already have an docker registry
### account and have logged in from the command line at your workstation.
### Refer README.md for instruction.
###
### ARGUMENTS
###     <DockerfileDir>: Directory that contains Dockerfile
###
### OPTIONS
###     -h: Show detail help.
###     -p: Also push the image
###     -r <tag>: Release docker image as zanata/<DockerRepoName>:<tag>
###         For normal release, just put version number. e.g. '4.3.0'
###         If you change Dockerfile after a released version, put the
###         sequence number after version, e.g. '4.3.0-1'
###
###         This does following:
###         1. Update ZANATA_VERSION in Dockerfile.
###            (Sequence number will NOT be included)
###         2. Make a commit to zanata-docker-file
###            with message: '[release] Image zanata/<DockerRepoName>:<version> is released'
###            Note that this commit will NOT be pushed to zanata-docker-file automatically.
###         3. Build and tag a imag as zanata/<DockerRepoName>:<tag>
###         4. Push the image to DockerHub
###
###     -t: docker image tags. Can specify multiple times for multiple tags.
###         E.g. -t 'latest' -t '4.0.0' -t '4.0.0-1'
###         If no other tag, the image is tag as 'latest'
###
### ENVIRONMENT
###     ZANATA_DOCKER_PUSH_REGISTRY: Docker registry for pushing
###         Note that you should configure /etc/sysconfig/docker to add
###         the registry.
###         Default: docker.io
: ${ZANATA_DOCKER_PUSH_REGISTRY:=docker.io}

###
shopt -s globstar
ScriptDir=$(dirname $(readlink  -q -f $0))
ProgramName=$(basename $0)

##=== function definition Start ===
###
### EXIT_STATUS
###     Success:
###         EXIT_OK
declare EXIT_OK=0

###
###     Fatal that should stop immediately:
###         EXIT_FATAL_UNSPECIFIED: Unspecified fatal error,
###             usually indicate a bug in our scripts.
declare EXIT_FATAL_UNSPECIFIED=1

###         EXIT_FATAL_INVALID_OPTIONS: Wrong options were given
declare EXIT_FATAL_INVALID_OPTIONS=3

###         EXIT_FATAL_MISSING_DEPENDENCY: Cannot find dependency
declare EXIT_FATAL_MISSING_DEPENDENCY=4

###         EXIT_FATAL_UNKNOWN_MODULE: Invalid or unknown module name.
declare EXIT_FATAL_UNKNOWN_MODULE=5

###         EXIT_FATAL_FAIL: Script detected that a fatal error occurred.
declare EXIT_FATAL_FAIL=6

###
###     Error that need to stop before next stage:
###         EXIT_ERROR_FAIL: Script detected that an error occurred.
declare EXIT_ERROR_FAIL=20

###     Return value, should not print error messages:
###         EXIT_RETURN_FALSE: Script should return false
declare EXIT_RETURN_FALSE=40

function echo_stderr(){
    echo "$@" > /dev/stderr
}

function zanata_help_raw(){
    local script="$1"
    [ -z "$script" ] && script=$0
    sed -r -n -e '/^### ?/ {s|^### ?||p}' $script
}

##=== parsing Start ===
declare -a TagArray=()
declare -a ExtraOptionArray=()
RepoName=zanata
ReleaseMode=0
IsPush=0
ImageTag=
Version=

while getopts "ht:pr:" opt;do
    case $opt in
        h )
            zanata_help_raw $0
            exit ${EXIT_OK}
            ;;
        t )
            TagArray+=( ${OPTARG} )
            ;;
        p )
            IsPush=1
            ;;
        r )
            ImageTag=${OPTARG}
            Version=${ImageTag%%-*}
            TagArray+=( latest ${ImageTag} )
            IsPush=1
            ReleaseMode=1
            ;;
        * )
            failed ${EXIT_FATAL_INVALID_OPTIONS} "$opt"
            ;;
    esac
done
shift $((OPTIND-1))

## Check DockerfileDir
if [[ -z ${1-} ]];then
    echo_stderr "[FATAL] <DockerfileDir> not specified"
    echo_stderr "Use '$0 -h' for help"
    exit $EXIT_FATAL_INVALID_OPTIONS
elif [[ ! -r $1 ]];then
    echo_stderr "[FATAL] Directory $1 is not readable"
    exit $EXIT_FATAL_INVALID_OPTIONS
fi
DockerfileDir=$1

if [ -z "${TagArray-}" ];then
    TagArray=( latest )
fi

TaskName=$(basename "$DockerfileDir")
case $TaskName in
    zanata-server )
        DockerName=server
        ;;
esac

##=== Update Version when releasing
if [[ $ReleaseMode -eq 1 ]]; then
    cd $ScriptDir

    ## Does Docker hub already has the tag?
    tagStr=$(curl -s -S "https://registry.hub.docker.com/v2/repositories/$RepoName/$DockerName/tags/" | jq '.results[] | select(.name == "$ImageTag" )')
    if [[ -z $tagStr ]];then
        echo_stderr "Docker hub already has $RepoName/$DockerName:$ImageTag"
        exit $EXIT_RETURN_FALSE
    fi

    sed -i -e 's/^ARG ZANATA_VERSION=.*$/ARG ZANATA_VERSION='$Version'/' $DockerfileDir/Dockerfile
    git commit -a -m "[release] Image zanata/$DockerName:$ImageTag is released"
    cd -
fi
exit 0

##=== make Start ===
BuiltImage=

for tag in "${TagArray[@]}";do
    Image=$RepoName/$DockerName:$tag
    echo "Image $Image"
    if [ -z "$BuiltImage" ];then
        set -x
        docker build -t $Image $DockerfileDir
        set +x
        BuiltImage=$Image
    fi
    set -x
    docker tag $BuiltImage $ZANATA_DOCKER_PUSH_REGISTRY/$Image
    set +x
    if [ $IsPush -eq 1 ];then
        set -x
        docker push $ZANATA_DOCKER_PUSH_REGISTRY/$Image
        set +x
    fi
done

